name: Deployment with Fitness Functions Validation

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
        - staging
        - production
      skip_fitness_checks:
        description: 'Skip fitness function validation'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'

jobs:
  pre-deployment-validation:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_fitness_checks != 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run pre-deployment fitness tests
      id: pre-deployment-tests
      run: |
        echo "🔍 Running pre-deployment fitness function validation..."
        
        # Create validation directory
        mkdir -p deployment-validation
        
        # Run comprehensive fitness tests
        python -c "
        from fitness_functions import fitness_functions
        import json
        import time
        
        print('Running pre-deployment validation...')
        
        # Run all test scenarios
        scenarios = ['healthy_system', 'degraded_system', 'high_load']
        results = {}
        
        for scenario in scenarios:
            print(f'\\n--- Testing {scenario} ---')
            
            # Reset services
            for service_name in fitness_functions.services:
                fitness_functions.simulate_service_failure(service_name, True)
            
            # Apply scenario conditions
            if scenario == 'degraded_system':
                fitness_functions.services['payment_service'].base_response_time = 2.0
                fitness_functions.services['logistics_service'].base_response_time = 1.5
            elif scenario == 'high_load':
                # Test with higher load
                result = fitness_functions.run_availability_tests()
                concurrent_results = fitness_functions.test_concurrent_availability(100)
                
                results[scenario] = {
                    'overall_score': result.overall_score,
                    'is_healthy': result.is_healthy,
                    'critical_path_available': result.critical_path_available,
                    'concurrent_success_rate': concurrent_results['success_rate'],
                    'concurrent_requests_per_second': concurrent_results['requests_per_second']
                }
                continue
            
            # Run availability tests
            result = fitness_functions.run_availability_tests()
            results[scenario] = {
                'overall_score': result.overall_score,
                'is_healthy': result.is_healthy,
                'critical_path_available': result.critical_path_available,
                'issues': result.issues
            }
        
        # Calculate validation score
        scores = [r['overall_score'] for r in results.values()]
        avg_score = sum(scores) / len(scores)
        all_healthy = all(r['is_healthy'] for r in results.values())
        critical_path_ok = all(r['critical_path_available'] for r in results.values())
        
        validation_result = {
            'timestamp': time.time(),
            'scenarios_tested': list(results.keys()),
            'average_score': avg_score,
            'all_scenarios_healthy': all_healthy,
            'critical_path_available': critical_path_ok,
            'validation_passed': avg_score >= 70 and all_healthy and critical_path_ok,
            'detailed_results': results
        }
        
        # Save validation results
        with open('deployment-validation/pre_deployment_validation.json', 'w') as f:
            json.dump(validation_result, f, indent=2)
        
        # Set output variables
        print(f'::set-output name=validation_passed::{str(validation_result[\"validation_passed\"]).lower()}')
        print(f'::set-output name=average_score::{avg_score:.1f}')
        print(f'::set-output name=all_healthy::{str(all_healthy).lower()}')
        print(f'::set-output name=critical_path_ok::{str(critical_path_ok).lower()}')
        
        print(f'\\n📊 Pre-deployment validation results:')
        print(f'   Average Score: {avg_score:.1f}/100')
        print(f'   All Scenarios Healthy: {all_healthy}')
        print(f'   Critical Path Available: {critical_path_ok}')
        print(f'   Validation Passed: {validation_result[\"validation_passed\"]}')
        
        # Exit with appropriate code
        if validation_result['validation_passed']:
            print('✅ Pre-deployment validation passed')
            exit(0)
        else:
            print('❌ Pre-deployment validation failed')
            exit(1)
        "
        
    - name: 📊 Upload pre-deployment results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pre-deployment-validation
        path: deployment-validation/
        retention-days: 30
        
    - name: 🚨 Validation failed
      if: failure()
      run: |
        echo "❌ Pre-deployment validation failed!"
        echo "Deployment blocked due to fitness function validation failure."
        echo "Please fix the issues before proceeding with deployment."

  deploy:
    name: 🚀 Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: always() && (needs.pre-deployment-validation.result == 'success' || github.event.inputs.skip_fitness_checks == 'true')
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy application
      run: |
        echo "🚀 Deploying to ${{ github.event.inputs.environment || 'production' }}..."
        
        # Simulate deployment process
        echo "📦 Building application..."
        sleep 5
        
        echo "🚀 Deploying to environment..."
        sleep 10
        
        echo "✅ Deployment completed successfully"
        
        # Here you would typically:
        # - Build the application
        # - Deploy to staging/production
        # - Update DNS/load balancers
        # - Run database migrations
        # - etc.
        
    - name: 📊 Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: |
          fitness_functions.py
          run_demo.py
          requirements.txt
        retention-days: 30

  post-deployment-validation:
    name: 🔍 Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'success' && github.event.inputs.skip_fitness_checks != 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: ⏳ Wait for deployment to stabilize
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 30
        
    - name: 🧪 Run post-deployment fitness tests
      id: post-deployment-tests
      run: |
        echo "🔍 Running post-deployment fitness function validation..."
        
        # Create validation directory
        mkdir -p deployment-validation
        
        # Run post-deployment tests
        python -c "
        from fitness_functions import fitness_functions
        import json
        import time
        
        print('Running post-deployment validation...')
        
        # Run critical path tests multiple times
        test_results = []
        for i in range(5):
            print(f'\\n--- Post-deployment test {i+1}/5 ---')
            result = fitness_functions.run_availability_tests()
            test_results.append({
                'test_number': i+1,
                'overall_score': result.overall_score,
                'is_healthy': result.is_healthy,
                'critical_path_available': result.critical_path_available,
                'issues': result.issues
            })
        
        # Calculate post-deployment metrics
        scores = [r['overall_score'] for r in test_results]
        avg_score = sum(scores) / len(scores)
        all_healthy = all(r['is_healthy'] for r in test_results)
        critical_path_ok = all(r['critical_path_available'] for r in test_results)
        
        post_deployment_result = {
            'timestamp': time.time(),
            'deployment_environment': '${{ github.event.inputs.environment || 'production' }}',
            'tests_run': len(test_results),
            'average_score': avg_score,
            'all_tests_healthy': all_healthy,
            'critical_path_available': critical_path_ok,
            'validation_passed': avg_score >= 75 and all_healthy and critical_path_ok,
            'test_results': test_results
        }
        
        # Save post-deployment results
        with open('deployment-validation/post_deployment_validation.json', 'w') as f:
            json.dump(post_deployment_result, f, indent=2)
        
        # Set output variables
        print(f'::set-output name=validation_passed::{str(post_deployment_result[\"validation_passed\"]).lower()}')
        print(f'::set-output name=average_score::{avg_score:.1f}')
        print(f'::set-output name=all_healthy::{str(all_healthy).lower()}')
        print(f'::set-output name=critical_path_ok::{str(critical_path_ok).lower()}')
        
        print(f'\\n📊 Post-deployment validation results:')
        print(f'   Average Score: {avg_score:.1f}/100')
        print(f'   All Tests Healthy: {all_healthy}')
        print(f'   Critical Path Available: {critical_path_ok}')
        print(f'   Validation Passed: {post_deployment_result[\"validation_passed\"]}')
        
        # Exit with appropriate code
        if post_deployment_result['validation_passed']:
            print('✅ Post-deployment validation passed')
            exit(0)
        else:
            print('❌ Post-deployment validation failed')
            exit(1)
        "
        
    - name: 📊 Upload post-deployment results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: post-deployment-validation
        path: deployment-validation/
        retention-days: 30
        
    - name: 📈 Generate deployment report
      if: always()
      run: |
        echo "📋 Generating deployment validation report..."
        
        echo "## 🚀 Deployment Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Status:** ✅ Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "deployment-validation/post_deployment_validation.json" ]; then
          AVG_SCORE=$(python -c "import json; data=json.load(open('deployment-validation/post_deployment_validation.json')); print(f'{data[\"average_score\"]:.1f}')")
          ALL_HEALTHY=$(python -c "import json; data=json.load(open('deployment-validation/post_deployment_validation.json')); print(data['all_tests_healthy'])")
          CRITICAL_PATH=$(python -c "import json; data=json.load(open('deployment-validation/post_deployment_validation.json')); print(data['critical_path_available'])")
          
          echo "### Post-Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Average Score:** $AVG_SCORE/100" >> $GITHUB_STEP_SUMMARY
          echo "- **All Tests Healthy:** $([ "$ALL_HEALTHY" = "true" ] && echo "✅ Yes" || echo "❌ No")" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical Path Available:** $([ "$CRITICAL_PATH" = "true" ] && echo "✅ Yes" || echo "❌ No")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$ALL_HEALTHY" = "true" ] && [ "$CRITICAL_PATH" = "true" ]; then
            echo "✅ **Deployment validation successful!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Deployment validation completed with issues**" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
    - name: 🚨 Post-deployment validation failed
      if: failure()
      run: |
        echo "❌ Post-deployment validation failed!"
        echo "The deployment may have introduced issues."
        echo "Please investigate and consider rolling back if necessary."
        
    - name: 🎉 Deployment success
      if: success()
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "All fitness function validations passed."
        echo "System is healthy and operational." 